AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create Apache HTTP Server and MariaDB stack'

# パラメータセクション
Parameters:
  VPCCIDR: 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: '10.0.0.0/16'
    Description: 'VPC CIDR Block (eg 10.0.0.0/16)'
    Type: String
  PUBLICSUBNET01CIDR: 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: '10.0.0.0/24'
    Description: 'VPC CIDR Block (eg 10.0.0.0/24)'
    Type: String
  PUBLICSUBNET02CIDR: 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: '10.0.1.0/24'
    Description: 'VPC CIDR Block (eg 10.0.1.0/24)'
    Type: String
  PRIVATESUBNET01CIDR: 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: '10.0.2.0/24'
    Description: 'VPC CIDR Block (eg 10.0.2.0/24)'
    Type: String
  PRIVATESUBNET02CIDR: 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: '10.0.3.0/24'
    Description: 'VPC CIDR Block (eg 10.0.3.0/24)'
    Type: String
  DBADMINUSER: 
    Default: 'root'
    Description: 'database admin user name'
    Type: String
  DBADMINPASSWORD: 
    Default: 'rootpassword'
    Description: 'database admin password'
    Type: String

#マッピングセクション
Mappings:
  RegionMap:
    'ap-northeast-1':
      AMI: 'ami-0dfa284c9d7b2adad'
    'ap-northeast-3':
      AMI: 'ami-0edc148c9a2c0cdcf'

# リソースセクション
Resources:
  # VPC とVPC 関連のリソース
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: myshopVPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: 'InternetGateway'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet01:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PUBLICSUBNET01CIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: 'PublicSubnet01'
  PublicSubnet02:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PUBLICSUBNET02CIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: 'PublicSubnet02'
  PrivateSubnet01:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PRIVATESUBNET01CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'PrivateSubnet01'
  PrivateSubnet02:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PRIVATESUBNET02CIDR
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'PrivateSubnet02'
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: 'NATGateway'
  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  RouteTableForPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'RouteTableForPublic'
  RouteTableAssociationPublic1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref RouteTableForPublic
  RouteTableAssociationPublic2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref RouteTableForPublic
  RoutePublicToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableForPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  RouteTableForPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'RouteTableForPrivate'
  RoutePrivateToNATGateway:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableForPrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  RouteTableAssociationPrivate1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref RouteTableForPrivate
  RouteTableAssociationPrivate2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref RouteTableForPrivate   
  ALBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: 'ALBSG'
      GroupDescription: 'Security Group for ALB'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'ALBSG'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  APSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName : 'APSG'
      GroupDescription: 'Security Group for AP Server'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'APSG'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref ALBSG
  DBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName : 'DBSG'
      GroupDescription: 'Security Group for DB Server'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'DBSG'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref APSG
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: 'DBSubetGroup' 
      DBSubnetGroupDescription: 'Database Subnet Group'
      SubnetIds:
      - !Ref PrivateSubnet01
      - !Ref PrivateSubnet02
      Tags:
      - Key: Name
        Value: 'DBSubetGroup'
  # RDS データベース
  DBServer:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete # For AWS::RDS::DBInstance resources that don't specify the DBClusterIdentifier property, the default policy is Snapshot which can cause unwanted costs. However, for production setups, we highly recommend to stay with the default to avoid data loss.
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 0
      DBInstanceIdentifier: myshopdb
      DBInstanceClass: 'db.t3.micro'
      DBName: myshop
      Engine: mariadb
      EngineVersion: 10.11
      StorageType: gp2
      MasterUsername: !Ref DBADMINUSER
      MasterUserPassword: !Ref DBADMINPASSWORD
      VPCSecurityGroups:
      - !Sub ${DBSG.GroupId}
      DBSubnetGroupName: !Ref DBSubnetGroup
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
      - Key: Name
        Value: 'myshop db'
    DependsOn: DBSG
  # EC2 インスタンス用 IAM ロール
  myshopRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'myshopRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
      - Key: Name
        Value: 'myshopRole'
  myshopRoleProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref myshopRole
  # EC2 インスタンス
  APServer: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt APSG.GroupId
      SubnetId: !Ref PrivateSubnet01
      IamInstanceProfile:
        !Ref myshopRoleProfile
      UserData: !Base64 |
          #!/bin/bash
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
          AZ=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
          yum update -y
          yum -y install httpd
          cat <<EOF >> /var/www/html/index.html
          <!DOCTYPE html>
          <html>
            <head>
              <title>EC2</title>
            </head>
            <body>
              <p><font size="7" >Welcome to AWS at $(date +%F) ! (from EC2) at ${AZ}</font></p>
            </body>
          </html>
          EOF
          chown -R apache:apache /var/www/html
          service httpd start
          chkconfig httpd on
      Tags:
        - Key: Name
          Value: 'myshop ap'
  # ELB の Application Load Balancer
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: 'application'
      Scheme: 'internet-facing'
      Name: ALB
      Tags:
        - Key: Name
          Value: ALB
      IpAddressType: ipv4
      Subnets: 
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      SecurityGroups: 
        - !Ref ALBSG

  ListenerHTTP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: 'TargetGroup'
      Tags:
        - Key: Name
          Value: 'TargetGroup'
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: '200'
      VpcId: !Ref VPC
      TargetType: instance
      Targets:
        - Id: !Ref APServer
# アウトプットセクション
Outputs:
  # RDS データベースのエンドポイント
  DBInstanceEndpoint:
    Value: !GetAtt DBServer.Endpoint.Address
  # EC2 インスタンスの ID
  APServerInstanceId:
    Value: !Ref APServer
  # ELB (Application Load Balancer) の DNS名
  ALBDNSName:
    Description: ALB DNS Name
    Value: !Join
        - ""
        - - http://
          - !GetAtt ALB.DNSName